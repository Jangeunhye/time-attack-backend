// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id
  email             String          @unique
  encryptedPassword String
  createdAt         DateTime        @default(now())
  writtenTweets     Tweet[]         @relation(name: "writtenTweets")
  profile           UserProfile?
  bookmarkTweets    BookmarkTweet[]

  followers  Follow[]  @relation(name: "follower")
  followings Follow[]  @relation(name: "following")
  comments   Comment[]
}

model UserProfile {
  userId           String   @id
  user             User     @relation(fields: [userId], references: [id])
  nickname         String
  selfIntroduction String
  updatedAt        DateTime @updatedAt
}

model Tweet {
  id             Int             @id @default(autoincrement())
  author         User            @relation(name: "writtenTweets", fields: [authorId], references: [id])
  authorId       String
  comments       Comment[]
  content        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bookmarkTweets BookmarkTweet[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int
}

model BookmarkTweet {
  id        Int      @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  userId    String
  tweetId   Int
  createdAt DateTime @default(now())

  @@unique([userId, tweetId])
}

model Follow {
  id          Int    @default(autoincrement())
  followerId  String
  follower    User   @relation(name: "follower", fields: [followerId], references: [id])
  followingId String
  following   User   @relation(name: "following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

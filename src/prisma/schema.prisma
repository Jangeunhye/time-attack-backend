// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id
  email             String         @unique
  encryptedPassword String
  createdAt         DateTime       @default(now())
  writtenPosts      Post[]         @relation(name: "writtenPosts")
  profile           UserProfile?
  posts             Post[]
  bookmarkPosts     BookmarkPost[]

  followers  Follow[]  @relation(name: "follower")
  followings Follow[]  @relation(name: "following")
  comments   Comment[]
}

model UserProfile {
  userId      String   @id
  user        User     @relation(fields: [userId], references: [id])
  nickname    String?
  description String?
  updatedAt   DateTime @updatedAt
}

model Post {
  id            Int            @id @default(autoincrement())
  author        User           @relation(name: "writtenPosts", fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  content       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?
  bookmarkPosts BookmarkPost[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model BookmarkPost {
  id        Int      @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Follow {
  id          Int    @default(autoincrement())
  followerId  String
  follower    User   @relation(name: "follower", fields: [followerId], references: [id])
  followingId String
  following   User   @relation(name: "following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
